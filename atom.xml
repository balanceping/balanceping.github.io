<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-08-11T15:18:09.534Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>balanceping</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2019/08/11/Ubuntu%2016.04%E5%AE%89%E8%A3%85docker%E8%AF%A6%E7%BB%86%E6%AD%A5%E9%AA%A4/"/>
    <id>http://yoursite.com/2019/08/11/Ubuntu 16.04安装docker详细步骤/</id>
    <published>2019-08-11T15:18:09.534Z</published>
    <updated>2019-08-11T15:18:09.534Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Ubuntu-16-04安装docker详细步骤"><a href="#Ubuntu-16-04安装docker详细步骤" class="headerlink" title="Ubuntu 16.04安装docker详细步骤"></a>Ubuntu 16.04安装docker详细步骤</h1><h2 id="开始安装"><a href="#开始安装" class="headerlink" title="开始安装"></a>开始安装</h2><ul><li><p>由于apt官方库里的docker版本可能比较旧，所以先卸载可能存在的旧版本：</p><p><code>$ sudo apt-get remove docker docker-engine docker-ce docker.io</code></p></li><li><p>更新apt包索引：</p><p><code>$ sudo apt-get update</code></p></li><li><p>安装以下包以使apt可以通过HTTPS使用存储库（repository）：</p><p><code>$ sudo apt-get install -y apt-transport-https ca-certificates curl software-properties-common</code></p></li><li><p>添加Docker官方的GPG密钥：</p><p><code>$ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -</code></p></li></ul><ul><li><p>使用下面的命令来设置<strong>stable</strong>存储库：</p><p><code>$ sudo add-apt-repository &quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable&quot;</code></p></li><li><p>再更新一下apt包索引：</p><p><code>$ sudo apt-get update</code></p></li><li><p>安装最新版本的Docker CE：</p><p><code>$ sudo apt-get install -y docker-ce</code></p></li></ul><h2 id="验证docker"><a href="#验证docker" class="headerlink" title="验证docker"></a>验证docker</h2><ul><li><p>查看docker服务是否启动：</p><p><code>$ systemctl status docker</code></p><p><img src="https://img-blog.csdn.net/20180907082608886?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2ppbmtpbmcwMQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="img"></p></li><li><p>若未启动，则启动docker服务：</p><p><code>$ sudo systemctl start docker</code></p></li><li><p>经典的hello world：</p><p><code>$ sudo docker run hello-world</code></p><p><img src="https://img-blog.csdn.net/20180907084432697?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2ppbmtpbmcwMQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="img"></p><p>有以上输出,表示docker安装成功.</p></li></ul><h2 id="在ubuntu平台下使用apt-get命令下载速度太慢的问题解决"><a href="#在ubuntu平台下使用apt-get命令下载速度太慢的问题解决" class="headerlink" title="在ubuntu平台下使用apt-get命令下载速度太慢的问题解决"></a>在ubuntu平台下使用apt-get命令下载速度太慢的问题解决</h2><h4 id="第一种"><a href="#第一种" class="headerlink" title="第一种"></a>第一种</h4><p>1、进入设置，从哪进都一样找到就行。</p><p><img src="https://images2017.cnblogs.com/blog/944919/201708/944919-20170830005240452-1968753625.png" alt="img"></p><p>2、选择软件与更新（Software and updates，英语估计是这个把）</p><p><img src="https://images2017.cnblogs.com/blog/944919/201708/944919-20170830005428765-1035602265.png" alt="img"></p><p><img src="https://images2017.cnblogs.com/blog/944919/201708/944919-20170830005641343-899012794.png" alt="img"></p><p>点击下载自：这个下拉框，选中其它站点，选择镜像</p><p><img src="https://images2017.cnblogs.com/blog/944919/201708/944919-20170830005846687-1905338950.png" alt="img"></p><p>选择阿里的或者搜狐的镜像，然后点击选择服务器</p><p><img src="https://images2017.cnblogs.com/blog/944919/201708/944919-20170830005925968-1768489380.png" alt="img">    </p><p>输入管理员密码</p><p><img src="https://images2017.cnblogs.com/blog/944919/201708/944919-20170830010002796-1102616069.png" alt="img"></p><p><img src="https://images2017.cnblogs.com/blog/944919/201708/944919-20170830010020702-239895178.png" alt="img"></p><p><img src="https://images2017.cnblogs.com/blog/944919/201708/944919-20170830010054624-358216468.png" alt="img"></p><p>你可以选择等待，或者直接Cancel</p><p>然后下拉框的选中就改变了，Ctrl + Alt + T进入终端</p><table><thead><tr><th>1</th><th><code>apt-get update　　//更新库</code></th></tr></thead><tbody><tr><td></td><td></td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Ubuntu-16-04安装docker详细步骤&quot;&gt;&lt;a href=&quot;#Ubuntu-16-04安装docker详细步骤&quot; class=&quot;headerlink&quot; title=&quot;Ubuntu 16.04安装docker详细步骤&quot;&gt;&lt;/a&gt;Ubuntu 16.04安装
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2019/08/11/VMware14.0.0%20%E7%89%88%E6%9C%AC%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AE%89%E8%A3%85Ubuntu16.04%20LTS%E7%89%88%E6%9C%ACLinux%E7%B3%BB%E7%BB%9F%EF%BC%88%E5%A4%9A%E5%9B%BE%E8%AF%A6%E7%BB%86%E6%AD%A5%E9%AA%A4%EF%BC%89/"/>
    <id>http://yoursite.com/2019/08/11/VMware14.0.0 版本虚拟机安装Ubuntu16.04 LTS版本Linux系统（多图详细步骤）/</id>
    <published>2019-08-11T10:52:31.328Z</published>
    <updated>2019-08-11T13:21:34.379Z</updated>
    
    <content type="html"><![CDATA[<h2 id="VMware14-0-0-版本虚拟机安装Ubuntu16-04-LTS版本Linux系统（多图详细步骤）"><a href="#VMware14-0-0-版本虚拟机安装Ubuntu16-04-LTS版本Linux系统（多图详细步骤）" class="headerlink" title="VMware14.0.0 版本虚拟机安装Ubuntu16.04 LTS版本Linux系统（多图详细步骤）"></a>VMware14.0.0 版本虚拟机安装Ubuntu16.04 LTS版本Linux系统（多图详细步骤）</h2><h3 id="一-前期准备工作"><a href="#一-前期准备工作" class="headerlink" title="一.前期准备工作"></a>一.前期准备工作</h3><p>1.成功安装完成VMware14软件；</p><p>2.去<a href="http://cn.ubuntu.com/download/" target="_blank" rel="noopener">Ubuntu官网</a>下载Ubuntu16.0.4 LTS 版本的镜像文件。</p><h3 id="二-安装步骤"><a href="#二-安装步骤" class="headerlink" title="二.安装步骤"></a>二.安装步骤</h3><p>1.打开VMware软件，选择《创建虚拟机》；</p><p><img src="https://images2017.cnblogs.com/blog/1262116/201711/1262116-20171114214752624-1893265314.png" alt="img"></p><p>2.选择《自定义》，并点击《下一步》；</p><p><img src="https://images2017.cnblogs.com/blog/1262116/201711/1262116-20171114220919046-1475205226.png" alt="img"></p><p>3.硬件兼容性选择《Workstation14.x》,并点击《下一步》；</p><p><img src="https://images2017.cnblogs.com/blog/1262116/201711/1262116-20171114215116452-2106504939.png" alt="img"></p><p>4.选择《稍后安装操作系统》，并点击《下一步》；</p><p><img src="https://images2017.cnblogs.com/blog/1262116/201711/1262116-20171114220939859-1033177477.png" alt="img"></p><p>5.客户机操作系统选择《Linux(L)》，版本选择《Ubuntu 64位》，并点击《下一步》；</p><p><img src="https://images2017.cnblogs.com/blog/1262116/201711/1262116-20171114215359374-1666184986.png" alt="img"></p><p>6.在电脑非系统盘建立一个文件夹，用于存放安装后的Ubuntu系统，并选择该目录，并点击《下一步》，如图所示：</p><p><img src="https://images2017.cnblogs.com/blog/1262116/201711/1262116-20171114221014437-2083614353.png" alt="img"></p><p>7.处理器配置采用默认配置，如图所示，并点击《下一步》；</p><p><img src="https://images2017.cnblogs.com/blog/1262116/201711/1262116-20171114221026640-1184694460.png" alt="img"></p><p>8.虚拟机内存分配根据电脑配置来分配，本机分配1024MB大小，分配好大小后点击《下一步》：</p><p><img src="https://images2017.cnblogs.com/blog/1262116/201711/1262116-20171114221040218-1509185890.png" alt="img"></p><p>9.网络类型选择《使用网络地址转换（NAT）(E)》选项，tips:在VMware中提供了三种网络模式，分别为①桥接模式(Bridge)②网络地址转换模式(NAT)③ 仅主机模式（Host-Only）,三种网络模式各自有不同的功能，需要用到的可以详细了解；</p><p><img src="https://images2017.cnblogs.com/blog/1262116/201711/1262116-20171114220843171-1259203060.png" alt="img"></p><p>10.加下来两个步骤均选择默认选项，并点击《下一步》；</p><p><img src="https://images2017.cnblogs.com/blog/1262116/201711/1262116-20171114221229562-850148405.png" alt="img"></p><p><img src="https://images2017.cnblogs.com/blog/1262116/201711/1262116-20171114221253499-1100436349.png" alt="img"></p><p>11.选择磁盘选择《创建新虚拟磁盘》，并点击《下一步》；</p><p><img src="https://images2017.cnblogs.com/blog/1262116/201711/1262116-20171114221445468-510650262.png" alt="img"></p><p>12.磁盘大小根据自己实际需要，本机选择30GB大小，并选择《将虚拟磁盘拆分成多个文件（M）》，并点击《下一步》；</p><p><img src="https://images2017.cnblogs.com/blog/1262116/201711/1262116-20171114221745515-384568884.png" alt="img"></p><p>13.指定磁盘文件命名《Ubuntu 16 0.4 LTS》,并点击《下一步》；</p><p><img src="https://images2017.cnblogs.com/blog/1262116/201711/1262116-20171114222037749-1676930526.png" alt="img"></p><p>14.到下一界面时选择《自定义硬件》，并进入下一步设置</p><p><img src="https://images2017.cnblogs.com/blog/1262116/201711/1262116-20171114222343843-1824083181.png" alt="img"></p><p>15.在硬件设置界面点击《新CD/DVD（SATA）》选项，右边选择《使用ISO映像文件（M）》,并选择Ubuntu16.04镜像所在文件夹位置,并点击确定，虚拟机基本完成安装。</p><p><img src="https://images2017.cnblogs.com/blog/1262116/201711/1262116-20171114222613234-251679657.png" alt="img"></p><p>16.开启虚拟机进行进一步的安装配置。</p><p><img src="https://images2017.cnblogs.com/blog/1262116/201711/1262116-20171114223144437-394586386.png" alt="img"></p><p>17.开启虚拟机后，进一步的安装配置如图所示；</p><p>选择中文安装；</p><p><img src="https://images2017.cnblogs.com/blog/1262116/201711/1262116-20171114223347015-2141500032.png" alt="img"></p><p>根据需要勾选软件安装；</p><p><img src="https://images2017.cnblogs.com/blog/1262116/201711/1262116-20171114223359827-1182924329.png" alt="img"></p><p><img src="https://images2017.cnblogs.com/blog/1262116/201711/1262116-20171114223655687-367411558.png" alt="img"></p><p>输入自己的用户名和密码；</p><p><img src="https://images2017.cnblogs.com/blog/1262116/201711/1262116-20171114223718765-1826745022.png" alt="img"></p><p>点击《继续》开始安装，稍等一会后安装完成；并点击重启后输入用户名和密码后进入Ubuntu系统界面。</p><p><img src="https://images2017.cnblogs.com/blog/1262116/201711/1262116-20171114223748234-1553661565.png" alt="img"></p><p>安装完成</p><h3 id="三、配置网络"><a href="#三、配置网络" class="headerlink" title="三、配置网络"></a>三、配置网络</h3><p>这里，我们选择NAT方式，来实现Ubuntu的静态IP地址配置。</p><p>打开VMware，在顶部依次选择：编辑 &gt; 虚拟网路编辑器，打开虚拟网路编辑器：</p><p><img src="https://www.linuxidc.com/upload/2017_04/170424213052241.png" alt="img"></p><p>首先，去掉VMnet0和VMnet1，只保留VMnet8。然后，去掉如下图中的“使用本地DHCP服务奖IP地址分配给虚拟机”：</p><p><img src="https://www.linuxidc.com/upload/2017_04/170424213052242.png" alt="img"></p><p>此外，这里的子网IP为：192.168.8.0，子网掩码为：255.255.255.0，因此，在Ubuntu中，设置IP地址的时候，可以设置为192.168.8.x，x可以为1~255。</p><p>选择“NAT设置”，打开NAT设置面板：</p><p><img src="https://www.linuxidc.com/upload/2017_04/170424213052243.png" alt="img"></p><p>查看自己的网关地址，例如，此处的网关应该为：192.168.8.2。</p><p>最后，在VMWare的虚拟机管理界面，选择Ubuntu的“编辑虚拟机设置”，打开Ubuntu这个虚拟的设置界面。</p><p>选择网络适配器，然后确定网络连接选中的是“自定义”中的VMnet8(NAT模式)：</p><p><img src="https://www.linuxidc.com/upload/2017_04/1704242130522411.png" alt="img"></p><p>完成以上步骤，VMWare的网络环境也就设置完成。</p><p>为Ubuntu设置静态IP地址</p><p>第一种</p><p>通过网路管理面板设置IP</p><p>在Ubuntu桌面的右上角，点击网络图标，然后选择“Edit Connections”：</p><p><img src="https://www.linuxidc.com/upload/2017_04/170424213052244.png" alt="img"></p><p>Step 1 点击“Edit”按钮，打开编辑页面</p><p>Step 2 Method：选择Manual</p><p>Step 3 将IP地址填入Addresses栏</p><p><img src="https://www.linuxidc.com/upload/2017_04/170424213052245.png" alt="img"></p><p>为： IP： 192.168.8.100 子网掩码： 255.255.255.0 网关： 192.168.8.2</p><p>然后，选择保存。</p><p>最后，点击Ubuntu桌面右上角的网络图标，选择“Disconnect”，断开连接。然后再打开该菜单，选择”Connect”，即可连接上网。</p><p>第二种</p><p>通过Terminal命令行来设置IP地址</p><p>打开Ubuntu的终端，输入：</p><p><code>sudo gedit /etc/network/interfaces</code></p><p>表示使用gedit编辑器打开interfaces文件。 在打开的文件中，若有内容，先全部删除。然后输入如下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">auto lo</span><br><span class="line">iface lo inet loopback</span><br><span class="line"> </span><br><span class="line">auto ens33</span><br><span class="line">iface ens33 inet static</span><br><span class="line">address 192.168.8.100</span><br><span class="line">netmask 255.255.255.0</span><br><span class="line">gateway 192.168.8.2</span><br></pre></td></tr></table></figure><p>如下图所示：</p><p><img src="https://www.linuxidc.com/upload/2017_04/170424213052246.png" alt="img"></p><p>然后，配置DNS服务器：</p><p><code>sudo gedit /etc/resolv.conf</code></p><p>在里面填入阿里的DNS：223.5.5.5</p><p><code>nameserver 223.5.5.5</code></p><p>保存</p><p>关闭gedit（先保存，后关闭），然后，在命令行中输入：</p><p><code>sudo /etc/init.d/networking restart</code></p><p>重启网络即可。</p><p>在Ubuntu 16.04版本中，网卡的名称不是eth0，而是ens33。所以，在配置interfaces文件的时候，不要用eth0代替ens33，否则也会出现这个问题。当然，你可以通过ifconfig查看自己的网卡情况。</p><p><img src="https://www.linuxidc.com/upload/2017_04/1704242130522410.png" alt="img">        </p><p>重启系统之后，发现网络无法使用，右上角的网络图标点击之后显示“device not managed”</p><p>解决方法：</p><p><code>sudo gedit /etc/NetworkManager/NetworkManager.conf</code></p><p>打开该文件，将“managed=false”修改为“managed=true”。</p><p>重启network manager：</p><p><code>sudo service network-manager restart</code></p><h3 id="安装时出现的问题"><a href="#安装时出现的问题" class="headerlink" title="安装时出现的问题"></a>安装时出现的问题</h3><p>1、ubuntu下使用vi是方向键变乱码 退格键不能使用的解决方法</p><ul><li><p>编辑/etc/vim/vimrc.tiny</p><p>由于/etc/vim/vimrc.tiny的拥有者是root用户，所以要在root的权限下对这个文件进行修改。很简单，这个文件里面的倒数第二句话是“set compatible”，如下所示：   </p><p><img src="https://img-my.csdn.net/uploads/201207/03/1341249971_4390.png" alt="img"></p><p>将“compatible”改成“nocompatible”非兼容模式就可以解决方向键变ABCD的问题了。接下来要解决Backspace键的问题也很简单，在刚才那句话后面再加一句：<code>set backspace=2</code></p><p>变成下图所示：</p><p><img src="https://img-my.csdn.net/uploads/201207/03/1341251099_9038.png" alt="img"></p></li><li><p>安装vim full版本</p><p>由于ubuntu预安装的是tiny版本，所以会导致我们在使用上的产生上述的不便。但是，我们安装了vim的full版本之后，键盘的所有键在vi下就很正常了。</p><p>首先，要先卸掉旧版的vi，输入以下命令：</p><p><code>sudo apt-get remove vim-common</code></p><p>然后安装full版的vim，输入命令：</p><p><code>sudo apt-get install vim</code></p><p>这样安装好了之后，我们在编辑文件的时候依然是使用“vi”命令来启动新装的vim，但是操作起来比tiny更加方便了。</p></li><li><p>添加”.vimrc”文件</p><p>这并不是一个聪明的方法。它是在用户的个人目录下，编辑.vimrc文件(注意文件名是以“.”开头的)，添加下面两句语句：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">set nocompatible          //以非兼容模式工作</span><br><span class="line">set backspace=2</span><br></pre></td></tr></table></figure><p>如下图所示：<img src="https://img-my.csdn.net/uploads/201207/03/1341251001_3818.png" alt="img"></p></li></ul><p>​      </p><p>保存退出之后，以后该用户使用vi就能够避免键盘方向键和Backspace键无效的问题了。</p><p>之所以说它不是个聪明的办法是因为我们必须为每个用户都在其个人目录下添加“.vimrc”文件，才能使所有用户都正常使用vi的功能，这是个比较大的工作量。所以也不推荐，尽管我自己初始也是用这种办法解决的(因为我系统上的用户只有2个，比较少)。</p><p>推荐第二种。</p><p>2、vim编辑文件时，出现如下的错误：</p>   <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Found a swap file by the name</span><br><span class="line"></span><br><span class="line"><span class="string">"/opt/nginx/conf/.nginx.conf.swp"</span></span><br><span class="line"></span><br><span class="line">owned by: root dated:Sat Apr <span class="number">5</span> <span class="number">08</span>:<span class="number">11</span>:<span class="number">44</span> <span class="number">2014</span></span><br><span class="line"></span><br><span class="line">file name: /opt/nginx/conf/nginx.conf</span><br><span class="line"></span><br><span class="line">modified: YES</span><br><span class="line"></span><br><span class="line">user name: root host name: localhost.localdomain</span><br><span class="line"></span><br><span class="line">process ID: <span class="number">1343</span></span><br><span class="line"></span><br><span class="line">While opening file <span class="string">"/opt/nginx/conf/nginx.conf"</span></span><br><span class="line"></span><br><span class="line">dated: Sat Apr <span class="number">5</span> <span class="number">08</span>:<span class="number">13</span>:<span class="number">44</span> <span class="number">2014</span></span><br><span class="line"></span><br><span class="line">NEWER than swap file!</span><br></pre></td></tr></table></figure><p><img src="https://www.ilanni.com/wp-content/uploads/2014/04/clip_image001.png" alt="img"></p><p>查询相关的资料发现是这是由于在编辑该文件的时异常退出，而vim在编辑文件时会创建一个交换文件swap file以保证文件的安全性。</p><p>所以在再每次打开这个文件都会出现这个警告，为了去掉这个警告，我们只需要删除这个swap文件即可。</p><p>该swap文件是隐藏的，我们可以通过ls –la命令查看到。使用rm命令进行删除即可。    </p><p>切换到该文件所在的目录下，在此是：/opt/nginx/conf</p><p><img src="https://www.ilanni.com/wp-content/uploads/2014/04/clip_image002_thumb.png" alt="img"></p><p>使用rm命令进行删除，rm –f .nginx.conf.swp</p><p>3、在虚拟机上安装了Ubuntu然后sudo apt-get update 无法解析域名</p><p>既然提示域名解析失败，那么就想办法加一个万能的域名：</p><p>1、编辑文件 sudo vim /etc/resolv.conf</p><p>2、在最后加上 nameserver 8.8.8.8</p><p>3、保存退出</p><h3 id="VM使用"><a href="#VM使用" class="headerlink" title="VM使用"></a>VM使用</h3><p> 最好在每一次大的改动后写入快照。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;VMware14-0-0-版本虚拟机安装Ubuntu16-04-LTS版本Linux系统（多图详细步骤）&quot;&gt;&lt;a href=&quot;#VMware14-0-0-版本虚拟机安装Ubuntu16-04-LTS版本Linux系统（多图详细步骤）&quot; class=&quot;headerl
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2019/08/08/Spring/"/>
    <id>http://yoursite.com/2019/08/08/Spring/</id>
    <published>2019-08-08T08:59:19.034Z</published>
    <updated>2019-08-08T08:59:08.932Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h2><h3 id="Spring-Framework-核心技术"><a href="#Spring-Framework-核心技术" class="headerlink" title="Spring Framework 核心技术"></a>Spring Framework 核心技术</h3><h3 id="IOC-Container-IOC-容器"><a href="#IOC-Container-IOC-容器" class="headerlink" title="IOC Container(IOC 容器)"></a>IOC Container(IOC 容器)</h3><ul><li><p>Java Bean</p><ul><li>Setter/Getter method</li></ul></li><li><p>Java Beans(规范)</p><ul><li><p>内省</p><ul><li><p>基础核心特性：反射（Reflection）</p></li><li><p>附加特性：引用（Reflection）</p><ul><li><p><code>Reflection</code></p><ul><li><p><code>SoftReflection</code></p></li><li><p><code>WeakReflection</code></p></li><li><p><code>PhantomReflection</code></p></li><li><p><code>FinalReflection</code></p></li></ul></li></ul></li></ul></li></ul></li></ul><pre><code>* BeanInfo  * `BeanDescriptor`  * `PropertyDescriptor`    * 事件：`PropertyChangeEvent`      * `EventObject`    * 监听器：`PropertyChangeListener`      * `java.util.EventListener`  * `MethodDescriptor`</code></pre><ul><li><h5 id="ioc（控制反转）"><a href="#ioc（控制反转）" class="headerlink" title="ioc（控制反转）"></a>ioc（控制反转）</h5><ul><li><p>应用不关心依赖组件的来源，通过一定DI方式查找</p></li><li><p>借鉴了Java EE 概念,javaee容器（EJB容器,JSF容器）</p><ul><li><p>EJB容器</p><ul><li><p>Bean 模式</p><ul><li>Local<ul><li>容器Bean</li></ul></li><li>Remote<ul><li>RMI</li></ul></li></ul></li><li><p>Bean类型</p><ul><li><p>会话（Session Bean）</p><ul><li>无状态 Bean</li><li>有状态 Bean</li></ul></li><li><p>持久化 （Persistence Bean)</p><ul><li>Hibernate</li></ul></li><li><p>消息驱动 (Java Messaging Bean)</p><ul><li><p>IMS</p><ul><li>ActiveMQ Kafka</li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul><ul><li><h5 id="DI-依赖注入"><a href="#DI-依赖注入" class="headerlink" title="DI(依赖注入)"></a>DI(依赖注入)</h5><ul><li><p>Java EE : </p><ul><li>JNDI ( Java Naming and Diretory  interface)<ul><li><code>javax.naming.Context</code><ul><li>名称<ul><li><code>javax.naming.Context#lookup(java.lang.String)</code></li><li><code>javax.naming.Context#lookup(java.naming.Name)</code></li></ul></li></ul></li></ul></li><li>EJB<ul><li><code>javax.ejb.@Ejb</code></li><li></li></ul></li></ul></li><li><p>依赖查找（Dependency LookUp）</p><ul><li><p>ID、别名、名称查找</p><ul><li><code>BeanFactory#getBean(String)</code>：Object</li></ul></li><li><p>类型查找</p><ul><li><code>BeanFactory#getBean(Class)</code>：T</li></ul></li><li><p>注解查找</p><ul><li><code>ListableBeanFactory#getBeanWithAnnotation(Class)</code></li></ul></li><li><p>FactoryBean 查找</p><ul><li><code>FactoryBean#getObject()</code></li></ul></li><li><p>ObjectFactory 查找</p><ul><li><code>FactoryBean#getObject()</code></li></ul></li></ul></li><li><p>依赖注入（Dependency injection）</p><ul><li>方法<ul><li>Spring <code>@Autowired</code></li><li>Java <code>@Resource</code></li><li>Java EE <code>@inject</code></li></ul></li><li>途径<ul><li>字段（Filed）注入</li><li>属性（Setter ）注入</li><li>方法（Method ）注入</li><li>构造器（Constructor）注入</li></ul></li></ul></li></ul></li></ul><h3 id="Events"><a href="#Events" class="headerlink" title="Events"></a>Events</h3><p>核心模式：观察模式</p><h4 id="Spring事件-ApplicationEvent"><a href="#Spring事件-ApplicationEvent" class="headerlink" title="Spring事件 : ApplicationEvent"></a>Spring事件 : <code>ApplicationEvent</code></h4><ul><li><code>java.util.EventObject</code></li></ul><h4 id="Spring事件监听器-ApplicationListener"><a href="#Spring事件监听器-ApplicationListener" class="headerlink" title="Spring事件监听器 : ApplicationListener"></a>Spring事件监听器 : <code>ApplicationListener</code></h4><ul><li><code>java.util.EventListener</code></li></ul><h3 id="Spring事件广播器：ApplicationEventMulticaster"><a href="#Spring事件广播器：ApplicationEventMulticaster" class="headerlink" title="Spring事件广播器：ApplicationEventMulticaster"></a>Spring事件广播器：ApplicationEventMulticaster</h3><ul><li><code>SimpleApplicationEventMulticaster</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">multicastEvent</span><span class="params">(ApplicationEvent event, @Nullable ResolvableType eventType)</span> </span>&#123;</span><br><span class="line">      ResolvableType type = eventType != <span class="keyword">null</span> ? eventType : <span class="keyword">this</span>.resolveDefaultEventType(event);</span><br><span class="line">      Iterator var4 = <span class="keyword">this</span>.getApplicationListeners(event, type).iterator();</span><br><span class="line"></span><br><span class="line">      <span class="keyword">while</span>(var4.hasNext()) &#123;</span><br><span class="line">          ApplicationListener&lt;?&gt; listener = (ApplicationListener)var4.next();</span><br><span class="line">          Executor executor = <span class="keyword">this</span>.getTaskExecutor();</span><br><span class="line">          <span class="keyword">if</span> (executor != <span class="keyword">null</span>) &#123;</span><br><span class="line">              executor.execute(() -&gt; &#123;</span><br><span class="line">                  <span class="keyword">this</span>.invokeListener(listener, event);</span><br><span class="line">              &#125;);</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              <span class="keyword">this</span>.invokeListener(listener, event);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>Bean 生命周期管理之一</p><ul><li>事件（包装）数据变化</li></ul><h3 id="Resource"><a href="#Resource" class="headerlink" title="Resource"></a>Resource</h3><h4 id="java资源管理"><a href="#java资源管理" class="headerlink" title="java资源管理"></a>java资源管理</h4><h5 id="URL资源管理"><a href="#URL资源管理" class="headerlink" title="URL资源管理"></a>URL资源管理</h5><ul><li>协议： <ul><li>获取协议：<code>java.net.URL#getProtocol</code></li><li>协议处理<ul><li>HTTP: <code>sun.net.www.protocol.http.Handler</code></li><li>FTP: <code>sun.net.www.protocol.ftp.Handler</code></li><li>HTTPS : <code>sun.net.www.protocol.https.Handler</code></li><li>File : <code>sun.net.www.protocol.file.Handler</code></li><li>Email: <code>sun.net.www.protocol.emailto.Handler</code></li></ul></li></ul></li></ul><h5 id="ClassLoader-Class-Path-资源管理"><a href="#ClassLoader-Class-Path-资源管理" class="headerlink" title="ClassLoader(Class Path) 资源管理"></a>ClassLoader(Class Path) 资源管理</h5><ul><li>资源<ul><li>获取当前ClassLoader资源URL：<code>java.lang.ClassLoader#getResource(String)</code></li><li>获取当前ClassLoader所有资源URL: <code>java.lang.ClassLoader#getResources(String)</code></li><li>获取当前ClassLoader资源<code>InputStream</code>: <code>java.lang.ClassLoader#getResourceAsStream(String)</code></li></ul></li></ul><h5 id="Spring资源管理"><a href="#Spring资源管理" class="headerlink" title="Spring资源管理"></a>Spring资源管理</h5><p>资源定位 ：<code>classpath:/META-INF/abc.properties</code></p><p>多资源定位：<code>classspath*:/META-INF/abc.properties</code></p><h6 id="Resource接口"><a href="#Resource接口" class="headerlink" title="Resource接口"></a>Resource接口</h6><p>URL 、File  和 ClassLoader 封装实现</p><p>语义：</p><ul><li>资源定位（URL、File）</li><li>资源流读取（<code>InputSteam</code>）</li></ul><ul><li><p>实现类</p><ul><li><code>classPathResource</code><ul><li><code>getURL()</code>-&gt;<code>ClassLoader#getResource(String)</code></li><li><code>getInputStream</code>-&gt;<code>java.lang.ClassLoader#getResourceAsStream(String)</code></li></ul></li></ul></li><li><p>加载器</p><ul><li><code>ResourceLoader</code><ul><li>获取<code>resource</code> ：<code>ResourceLoader#getResource(String)</code></li><li>默认实现：<code>DefaultResourceLoader</code><ul><li>前缀 = “classpath:” -&gt;<code>classPathResource</code></li><li>否则 -&gt;<code>FileUrlResource</code>或<code>UrlResource</code></li></ul></li></ul></li></ul></li><li><p>协议扩展</p><ul><li><code>ProtocolResolver</code><ul><li>通过路径解析出 resource</li></ul></li></ul></li></ul><h3 id="i18n"><a href="#i18n" class="headerlink" title="i18n"></a>i18n</h3><h4 id="java-i18n"><a href="#java-i18n" class="headerlink" title="java i18n"></a>java i18n</h4><p>  java 标准接口<code>ResourceBundle</code></p><ul><li><p>&lt;java1.6 : 乱码, 解决方案native2ascci</p></li><li><p>java 1.6 <code>ResourceBundle.Control</code></p></li><li><p>java 1.8 <code>ResourceBundleControlProvider</code></p></li></ul><h4 id="Spring-MessageSource"><a href="#Spring-MessageSource" class="headerlink" title="Spring MessageSource"></a>Spring MessageSource</h4><ul><li><code>MessageFormat</code><ul><li>Hello,{0} -&gt;0=”World”-&gt;Hello,World</li></ul></li><li>实现类<ul><li><code>ResourceBundleMessageSource</code></li></ul></li></ul><h3 id="Validation"><a href="#Validation" class="headerlink" title="Validation"></a>Validation</h3><h4 id="Java-Bean-Validation-JSR-308"><a href="#Java-Bean-Validation-JSR-308" class="headerlink" title="Java Bean Validation(JSR-308)"></a>Java Bean Validation(JSR-308)</h4><h4 id="Spring-Validator"><a href="#Spring-Validator" class="headerlink" title="Spring Validator"></a>Spring Validator</h4><p>  Spring Validator  + Bean Validation  :<code>LocalValidatorFactoryBean</code></p><h5 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h5><p>  标准Java bean 校验</p><ul><li>Spring MVC 校验-&gt;Form 校验、<code>@RequestBody</code>校验，可以自定义</li><li>SpringBoot 外部化配置<ul><li><code>@ConfigurationProperties</code></li></ul></li></ul><h3 id="DataBinding"><a href="#DataBinding" class="headerlink" title="DataBinding"></a>DataBinding</h3><h5 id="使用场景-1"><a href="#使用场景-1" class="headerlink" title="使用场景"></a>使用场景</h5><ul><li>Spring 自定义绑定</li><li>Spring MVC 参数绑定</li><li>Spring Boot 外部化配置<ul><li><code>@ConfigurationProperties</code></li></ul></li></ul><h3 id="Type-Conversion"><a href="#Type-Conversion" class="headerlink" title="Type Conversion"></a>Type Conversion</h3><p>  常见类型转换</p><p>  自定义转换</p><h5 id="使用场景-2"><a href="#使用场景-2" class="headerlink" title="使用场景"></a>使用场景</h5><ul><li>Spring Boot 外部化配置<ul><li><code>@ConfigurationProperties</code></li></ul></li><li></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Spring&quot;&gt;&lt;a href=&quot;#Spring&quot; class=&quot;headerlink&quot; title=&quot;Spring&quot;&gt;&lt;/a&gt;Spring&lt;/h2&gt;&lt;h3 id=&quot;Spring-Framework-核心技术&quot;&gt;&lt;a href=&quot;#Spring-Framework
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>hexo + github 搭建个人免费博客</title>
    <link href="http://yoursite.com/2019/08/07/hexo%20+%20github%20%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%85%8D%E8%B4%B9%E5%8D%9A%E5%AE%A2/"/>
    <id>http://yoursite.com/2019/08/07/hexo + github 搭建个人免费博客/</id>
    <published>2019-08-07T07:04:50.568Z</published>
    <updated>2019-08-08T01:17:17.860Z</updated>
    
    <content type="html"><![CDATA[<h2 id="hexo-github-搭建个人免费博客"><a href="#hexo-github-搭建个人免费博客" class="headerlink" title="hexo + github 搭建个人免费博客"></a>hexo + github 搭建个人免费博客</h2><h4 id="1-前言"><a href="#1-前言" class="headerlink" title="1.前言"></a>1.前言</h4><p>   使用github pages服务搭建博客的好处：</p><ul><li><p>全是静态文件，访问速度快；</p></li><li><p>免费方便；</p></li><li><p>基于github的版本管理，想恢复到哪个历史版本都行；</p></li><li><p>博客内容可以轻松打包、转移、发布到其他平台；</p></li></ul><a id="more"></a><h5 id="1-1-准备工作"><a href="#1-1-准备工作" class="headerlink" title="1.1.准备工作"></a>1.1.准备工作</h5><p>在开始之前，你必须已经</p><ul><li>有一个github账号；</li></ul><ul><li>安装了node.js,并了解相关基础知识；</li></ul><ul><li>安装了git；</li></ul><p>本文所使用的环境</p><ul><li><p>windows10;</p></li><li><p><a href="mailto:node.js@10.15.3" target="_blank" rel="noopener">node.js@10.15.3</a>;</p></li><li><p><a href="mailto:git@2.20.1" target="_blank" rel="noopener">git@2.20.1</a>;</p></li><li><p><a href="mailto:hexo@3.9.0" target="_blank" rel="noopener">hexo@3.9.0</a>;</p></li></ul><h4 id="2-搭建github博客"><a href="#2-搭建github博客" class="headerlink" title="2.搭建github博客"></a>2.搭建github博客</h4><h5 id="2-1-创建仓库"><a href="#2-1-创建仓库" class="headerlink" title="2.1.创建仓库"></a>2.1.创建仓库</h5><p>创建一个名为你的用户名.github.io的仓库</p><h4 id="3-配置SSH-key"><a href="#3-配置SSH-key" class="headerlink" title="3.配置SSH key"></a>3.配置SSH key</h4><p>​      为什么要配置这个？因为你提交代码肯定需要你的github权限才可以，但是直接使用用户名和密码太不安全，所以我们使用ssh key来解决本地和服务器的问题。</p><p>用git bash 执行如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cd ~/. ssh #检查本机已存在的ssh密钥</span><br></pre></td></tr></table></figure><p>如果没有，则执行命令：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">"邮件地址"</span></span><br></pre></td></tr></table></figure><p>然后连续3次回车，最终会生成一个文件在用户目录下，打开用户目录，找到<code>.ssh\id_rsa.pub</code>文件，记事本打开并复制里面的内容，打开你的github主页，进入个人设置 -&gt; SSH and GPG keys -&gt; New SSH key：</p><p><img src="http://image.liuxianan.com/201608/20160818_143914_495_9084.png" alt="img"></p><p>将刚复制的内容粘贴到key那里，title随便填，保存。</p><h5 id="3-1测试是否成功"><a href="#3-1测试是否成功" class="headerlink" title="3.1测试是否成功"></a>3.1测试是否成功</h5><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -T git@github.com # 注意邮箱地址不用改</span><br></pre></td></tr></table></figure><p>如果提示<code>Are you sure you want to continue connecting (yes/no)?</code>，输入yes，然后会看到：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hi liuxianan! You’ve successfully authenticated, but GitHub does not provide shell access.</span><br></pre></td></tr></table></figure><p>看到这个信息说明SSH已配置成功！</p><p>此时你还需要配置：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name <span class="string">"liuxianan"</span><span class="comment">// 你的github用户名，非昵称</span></span><br><span class="line">$ git config --global user.email  <span class="string">"xxx@qq.com"</span><span class="comment">// 填写你的github注册邮箱</span></span><br></pre></td></tr></table></figure><h4 id="4-使用hexo写博客"><a href="#4-使用hexo写博客" class="headerlink" title="4.使用hexo写博客"></a>4.使用hexo写博客</h4><h5 id="4-1hexo简介"><a href="#4-1hexo简介" class="headerlink" title="4.1hexo简介"></a>4.1hexo简介</h5><p>Hexo是一个简单、快速、强大的基于 Github Pages 的博客发布工具，支持Markdown格式，有众多优秀插件和主题。</p><p>官网： <a href="http://hexo.io/" target="_blank" rel="noopener">http://hexo.io</a><br>github: <a href="https://github.com/hexojs/hexo" target="_blank" rel="noopener">https://github.com/hexojs/hexo</a></p><h5 id="4-2原理"><a href="#4-2原理" class="headerlink" title="4.2原理"></a>4.2原理</h5><p>由于github pages存放的都是静态文件，博客存放的不只是文章内容，还有文章列表、分类、标签、翻页等动态内容，假如每次写完一篇文章都要手动更新博文目录和相关链接信息，相信谁都会疯掉，所以hexo所做的就是将这些md文件都放在本地，每次写完文章后调用写好的命令来批量完成相关页面的生成，然后再将有改动的页面提交到github。</p><p>4.3 注意事项</p><p>安装之前先来说几个注意事项：</p><p>​    很多命令既可以用Windows的cmd来完成，也可以使用git bash来完成，但是部分命令会有一些问题，为避免不必要的问题，建议全部使用git bash来执行；</p><p>​    hexo不同版本差别比较大，网上很多文章的配置信息都是基于2.x的，所以注意不要被误导；</p><p>​    hexo有2种<code>_config.yml</code>文件，一个是根目录下的全局的<code>_config.yml</code>，一个是各个<code>theme</code>下的；</p><h5 id="4-安装"><a href="#4-安装" class="headerlink" title="4  安装"></a>4  安装</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g hexo</span><br></pre></td></tr></table></figure><h5 id="4-5-初始化"><a href="#4-5-初始化" class="headerlink" title="4.5 初始化"></a>4.5 初始化</h5><p>在电脑的某个地方新建一个名为hexo的文件夹（名字可以随便取），比如我的是<code>F:\Workspaces\hexo</code>，由于这个文件夹将来就作为你存放代码的地方，所以最好不要随便放。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cd /f/Workspaces/hexo/</span><br><span class="line">$ hexo init</span><br></pre></td></tr></table></figure><p>hexo会自动下载一些文件到这个目录，包括node_modules，目录结构如下图：</p><p><img src="http://image.liuxianan.com/201608/20160818_115922_773_1148.png" alt="img"></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo g # 生成</span><br><span class="line">$ hexo s # 启动服务</span><br></pre></td></tr></table></figure><p>执行以上命令之后，hexo就会在public文件夹生成相关html文件，这些文件将来都是要提交到github去的：</p><p><img src="http://image.liuxianan.com/201608/20160818_120700_028_2426.png" alt="img"></p><p><code>hexo s</code>是开启本地预览服务，打开浏览器访问 <a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000</a> 即可看到内容，很多人会碰到浏览器一直在转圈但是就是加载不出来的问题，一般情况下是因为端口占用的缘故，因为4000这个端口太常见了，解决端口冲突问题请参考这篇文章：</p><p><a href="http://blog.liuxianan.com/windows-port-bind.html" target="_blank" rel="noopener">http://blog.liuxianan.com/windows-port-bind.html</a></p><p>第一次初始化的时候hexo已经帮我们写了一篇名为 Hello World 的文章，默认的主题比较丑，打开时就是这个样子：</p><p><img src="http://image.liuxianan.com/201608/20160818_132443_202_6848.png" alt="img"></p><h5 id="4-6-修改主题"><a href="#4-6-修改主题" class="headerlink" title="4.6 修改主题"></a>4.6 修改主题</h5><p>既然默认主题很丑，那我们别的不做，首先来替换一个好看点的主题。这是 <a href="https://hexo.io/themes/" target="_blank" rel="noopener">官方主题</a>。</p><p>个人比较喜欢的2个主题：<a href="https://github.com/pinggod/hexo-theme-jekyll" target="_blank" rel="noopener">hexo-theme-jekyll</a> 和 <a href="https://github.com/litten/hexo-theme-yilia" target="_blank" rel="noopener">hexo-theme-yilia</a>。</p><p>首先下载这个主题：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cd /f/Workspaces/hexo/</span><br><span class="line">$ git clone https:<span class="comment">//github.com/litten/hexo-theme-yilia.git themes/yilia</span></span><br></pre></td></tr></table></figure><p><img src="http://image.liuxianan.com/201608/20160818_134500_245_0912.png" alt="img"></p><p>修改<code>_config.yml</code>中的<code>theme: landscape</code>改为<code>theme: yilia</code>，然后重新执行<code>hexo g</code>来重新生成。</p><p>如果出现一些莫名其妙的问题，可以先执行<code>hexo clean</code>来清理一下public的内容，然后再来重新生成和发布。</p><p>4.7上传到github</p><p>如果你一切都配置好了，发布上传很容易，一句<code>hexo d</code>就搞定，当然关键还是你要把所有东西配置好。</p><p>首先，<code>ssh key</code>肯定要配置好。</p><p>其次，配置<code>_config.yml</code>中有关deploy的部分：</p><p>正确写法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: git<span class="meta">@github</span>.com:仓库地址</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>安装一个插件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>其它命令不确定，部署这个命令一定要用git bash，否则会提示<code>Permission denied (publickey).</code></p><p>打开你的git bash，输入<code>hexo d</code>就会将本次有改动的代码全部提交，没有改动的不会：</p><p><img src="http://image.liuxianan.com/201608/20160818_140441_769_5024.png" alt="img"></p><h5 id="4-9保留CNAME、README-md等文件"><a href="#4-9保留CNAME、README-md等文件" class="headerlink" title="4.9保留CNAME、README.md等文件"></a>4.9保留CNAME、README.md等文件</h5><p>提交之后网页上一看，发现以前其它代码都没了，此时不要慌，一些非md文件可以把他们放到source文件夹下，这里的所有文件都会原样复制（除了md文件）到public目录的：</p><p><img src="http://image.liuxianan.com/201608/20160818_141037_580_8035.png" alt="img"></p><p>由于hexo默认会把所有md文件都转换成html，包括README.md，所有需要每次生成之后、上传之前，手动将README.md复制到public目录，并删除README.html。</p><h5 id="4-10常用hexo命令"><a href="#4-10常用hexo命令" class="headerlink" title="4.10常用hexo命令"></a>4.10常用hexo命令</h5><p>常见命令</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">hexo new "postName" #新建文章</span><br><span class="line">hexo new page "pageName" #新建页面</span><br><span class="line">hexo generate #生成静态页面至public目录</span><br><span class="line">hexo server #开启预览访问端口（默认端口4000，'ctrl + c'关闭server）</span><br><span class="line">hexo deploy #部署到GitHub</span><br><span class="line">hexo help  # 查看帮助</span><br><span class="line">hexo version  #查看Hexo的版本</span><br></pre></td></tr></table></figure><p>缩写：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo n == hexo <span class="keyword">new</span></span><br><span class="line">hexo g == hexo generate</span><br><span class="line">hexo s == hexo server</span><br><span class="line">hexo d == hexo deploy</span><br></pre></td></tr></table></figure><p>组合命令:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo s -g #生成并本地预览</span><br><span class="line">hexo d -g #生成并上传</span><br></pre></td></tr></table></figure><h5 id="4-11-config-yml"><a href="#4-11-config-yml" class="headerlink" title="4.11_config.yml"></a>4.11_config.yml</h5><p>这里面都是一些全局配置，每个参数的意思都比较简单明了，所以就不作详细介绍了。</p><p>需要特别注意的地方是，冒号后面必须有一个空格，否则可能会出问题。</p><h5 id="4-12写博客"><a href="#4-12写博客" class="headerlink" title="4.12写博客"></a>4.12写博客</h5><p>定位到我们的hexo根目录，执行命令：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo <span class="keyword">new</span> <span class="string">'my-first-blog'</span></span><br></pre></td></tr></table></figure><p>hexo会帮我们在<code>_posts</code>下生成相关md文件：</p><p><img src="http://image.liuxianan.com/201608/20160823_183047_352_1475.png" alt="img"></p><p>我们只需要打开这个文件就可以开始写博客了，默认生成如下内容：</p><p><img src="http://image.liuxianan.com/201608/20160823_183325_470_9306.png" alt="img"></p><p>当然你也可以直接自己新建md文件，用这个命令的好处是帮我们自动生成了时间。</p><p>一般完整格式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">title: postName #文章页面上的显示名称，一般是中文</span><br><span class="line">date: 2013-12-02 15:30:16 #文章生成时间，一般不改，当然也可以任意修改</span><br><span class="line">categories: 默认分类 #分类</span><br><span class="line">tags: [tag1,tag2,tag3] #文章标签，可空，多标签请用格式，注意:后面有个空格</span><br><span class="line">description: 附加一段文章摘要，字数最好在<span class="number">140</span>字以内，会出现在meta的description里面</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">以下是正文</span><br></pre></td></tr></table></figure><p>那么<code>hexo new page &#39;postName&#39;</code>命令和<code>hexo new &#39;postName&#39;</code>有什么区别呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo <span class="keyword">new</span> page <span class="string">"my-second-blog"</span></span><br></pre></td></tr></table></figure><p>生成如下：</p><p><img src="http://image.liuxianan.com/201608/20160823_184852_854_6502.png" alt="img"></p><p>最终部署时生成：<code>hexo\public\my-second-blog\index.html</code>，但是它不会作为文章出现在博文目录。</p><h5 id="4-12-1-写博客工具"><a href="#4-12-1-写博客工具" class="headerlink" title="4.12.1 写博客工具"></a>4.12.1 写博客工具</h5><p> typora</p><h5 id="4-12-2-如何让博文列表不显示全部内容"><a href="#4-12-2-如何让博文列表不显示全部内容" class="headerlink" title="4.12.2 如何让博文列表不显示全部内容"></a>4.12.2 如何让博文列表不显示全部内容</h5><p>默认情况下，生成的博文目录会显示全部的文章内容，如何设置文章摘要的长度呢？</p><p>答案是在合适的位置加上<code>&lt;!--more--&gt;</code>即可，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 前言</span><br><span class="line"></span><br><span class="line">使用github pages服务搭建博客的好处有：</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>. 全是静态文件，访问速度快；</span><br><span class="line"><span class="number">2</span>. 免费方便，不用花一分钱就可以搭建一个自由的个人博客，不需要服务器不需要后台；</span><br><span class="line"><span class="number">3</span>. 可以随意绑定自己的域名，不仔细看的话根本看不出来你的网站是基于github的；</span><br><span class="line"></span><br><span class="line">&lt;!--more--&gt;</span><br><span class="line"></span><br><span class="line"><span class="number">4</span>. 数据绝对安全，基于github的版本管理，想恢复到哪个历史版本都行；</span><br><span class="line"><span class="number">5</span>. 博客内容可以轻松打包、转移、发布到其它平台；</span><br><span class="line"><span class="number">6</span>. 等等；</span><br></pre></td></tr></table></figure><p>最终效果：</p><p><img src="http://image.liuxianan.com/201608/20160823_184633_653_1893.png" alt="img"></p><h4 id="5-参考"><a href="#5-参考" class="headerlink" title="5.参考"></a>5.参考</h4><p><a href="http://www.cnblogs.com/zhcncn/p/4097881.html" target="_blank" rel="noopener">http://www.cnblogs.com/zhcncn/p/4097881.html</a></p><p><a href="http://www.jianshu.com/p/05289a4bc8b2" target="_blank" rel="noopener">http://www.jianshu.com/p/05289a4bc8b2</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;hexo-github-搭建个人免费博客&quot;&gt;&lt;a href=&quot;#hexo-github-搭建个人免费博客&quot; class=&quot;headerlink&quot; title=&quot;hexo + github 搭建个人免费博客&quot;&gt;&lt;/a&gt;hexo + github 搭建个人免费博客&lt;/h2&gt;&lt;h4 id=&quot;1-前言&quot;&gt;&lt;a href=&quot;#1-前言&quot; class=&quot;headerlink&quot; title=&quot;1.前言&quot;&gt;&lt;/a&gt;1.前言&lt;/h4&gt;&lt;p&gt;   使用github pages服务搭建博客的好处：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;全是静态文件，访问速度快；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;免费方便；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;基于github的版本管理，想恢复到哪个历史版本都行；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;博客内容可以轻松打包、转移、发布到其他平台；&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
