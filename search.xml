<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA['docker学习']]></title>
    <url>%2F2019%2F08%2F22%2Fdocker%E5%AD%A6%E4%B9%A0%2F</url>
    <content type="text"><![CDATA[Docker学习1、Docker简介Docker 是一个开源的应用容器引擎，基于 Go 语言 并遵从Apache2.0协议开源。 Docker 可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。 容器是完全使用沙箱机制，相互之间不会有任何接口（类似 iPhone 的 app）,更重要的是容器性能开销极低。 Docker的应用场景 Web 应用的自动化打包和发布。 自动化测试和持续集成、发布。 在服务型环境中部署和调整数据库或其他的后台应用。 从头编译或者扩展现有的 OpenShift 或 Cloud Foundry 平台来搭建自己的 PaaS 环境。 Docker的优点 1、简化程序：Docker 让开发者可以打包他们的应用以及依赖包到一个可移植的容器中，然后发布到任何流行的 Linux 机器上，便可以实现虚拟化。Docker改变了虚拟化的方式，使开发者可以直接将自己的成果放入Docker中进行管理。方便快捷已经是 Docker的最大优势，过去需要用数天乃至数周的 任务，在Docker容器的处理下，只需要数秒就能完成。 2、避免选择恐惧症：如果你有选择恐惧症，还是资深患者。那么你可以使用 Docker 打包你的纠结！比如 Docker 镜像；Docker 镜像中包含了运行环境和配置，所以 Docker 可以简化部署多种应用实例工作。比如 Web 应用、后台应用、数据库应用、大数据应用比如 Hadoop 集群、消息队列等等都可以打包成一个镜像部署。 3、节省开支：一方面，云计算时代到来，使开发者不必为了追求效果而配置高额的硬件，Docker 改变了高性能必然高价格的思维定势。Docker 与云的结合，让云空间得到更充分的利用。不仅解决了硬件管理的问题，也改变了虚拟化的方式。 2、docker 安装Ubuntu Docker 安装Docker 支持以下的 Ubuntu 版本： Ubuntu Precise 12.04 (LTS) Ubuntu Trusty 14.04 (LTS) Ubuntu Wily 15.10 Xenial 16.04 (LTS) 其他更新的版本… 前提条件 Docker 要求 Ubuntu 系统的内核版本高于 3.10 ，查看本页面的前提条件来验证你的 Ubuntu 版本是否支持 Docker。 通过 uname -r 命令查看你当前的内核版本 runoob@runoob:~$ uname -r 使用脚本安装 Docker1、获取最新版本的 Docker 安装包runoob@runoob:~$ wget -qO- https://get.docker.com/ | sh 输入当前用户的密码后，就会下载脚本并且安装Docker及依赖包。 安装完成后有个提示： `` 12345If you would like to use Docker as a non-root user, you should now consider adding your user to the &quot;docker&quot; group with something like: sudo usermod -aG docker runoob Remember that you will have to log out and back in for this to take effect! 当要以非root用户可以直接运行docker时，需要执行 sudo usermod -aG docker runoob 命令，然后重新登陆，否则会有如下报错 2、启动docker 后台服务runoob@runoob:~$ sudo service docker start 镜像加速 鉴于国内网络问题，后续拉取 Docker 镜像十分缓慢，我们可以需要配置加速器来解决，我使用的是网易的镜像地址：http://hub-mirror.c.163.com。 新版的 Docker 使用 /etc/docker/daemon.json（Linux） 或者 %programdata%\docker\config\daemon.json（Windows） 来配置 Daemon。 请在该配置文件中加入（没有该文件的话，请先建一个）： `` 123&#123; &quot;registry-mirrors&quot;: [&quot;http://hub-mirror.c.163.com&quot;]&#125; CentOS Docker 安装Docker支持以下的CentOS版本： CentOS 7 (64-bit) CentOS 6.5 (64-bit) 或更高的版本 前提条件目前，CentOS 仅发行版本中的内核支持 Docker。 Docker 运行在 CentOS 7 上，要求系统为64位、系统内核版本为 3.10 以上。 Docker 运行在 CentOS-6.5 或更高的版本的 CentOS 上，要求系统为64位、系统内核版本为 2.6.32-431 或者更高版本。 使用 yum 安装（CentOS 7下）Docker 要求 CentOS 系统的内核版本高于 3.10 ，查看本页面的前提条件来验证你的CentOS 版本是否支持 Docker 。 通过 uname -r 安装 Docker从 2017 年 3 月开始 docker 在原来的基础上分为两个分支版本: Docker CE 和 Docker EE。 Docker CE 即社区免费版，Docker EE 即企业版，强调安全，但需付费使用。 本文介绍 Docker CE 的安装使用。 移除旧的版本： `` 12345678910$ sudo yum remove docker \ docker-client \ docker-client-latest \ docker-common \ docker-latest \ docker-latest-logrotate \ docker-logrotate \ docker-selinux \ docker-engine-selinux \ docker-engine 安装一些必要的系统工具： sudo yum install -y yum-utils device-mapper-persistent-data lvm2 添加软件源信息： sudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo 更新 yum 缓存： sudo yum makecache fast 安装 Docker-ce： sudo yum -y install docker-ce 启动 Docker 后台服务 sudo systemctl start docker 使用脚本安装 Docker1、使用 sudo 或 root 权限登录 Centos。 2、确保 yum 包更新到最新。 $ sudo yum update 3、执行 Docker 安装脚本。 12$ curl -fsSL https://get.docker.com -o get-docker.sh$ sudo sh get-docker.sh 执行这个脚本会添加 docker.repo 源并安装 Docker。 4、启动 Docker 进程。 1sudo systemctl start docker 5、验证 docker 是否安装成功并在容器中执行一个测试的镜像。 12$ sudo docker run hello-worlddocker ps 到此，Docker 在 CentOS 系统的安装完成。 镜像加速鉴于国内网络问题，后续拉取 Docker 镜像十分缓慢，我们可以需要配置加速器来解决，我使用的是网易的镜像地址：http://hub-mirror.c.163.com。 新版的 Docker 使用 /etc/docker/daemon.json（Linux） 或者 %programdata%\docker\config\daemon.json（Windows） 来配置 Daemon。 请在该配置文件中加入（没有该文件的话，请先建一个）： 123&#123; &quot;registry-mirrors&quot;: [&quot;http://hub-mirror.c.163.com&quot;]&#125; 删除 Docker CE执行以下命令来删除 Docker CE： 12$ sudo yum remove docker-ce$ sudo rm -rf /var/lib/docker]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2F2019%2F08%2F11%2FUbuntu%2016.04%E5%AE%89%E8%A3%85docker%E8%AF%A6%E7%BB%86%E6%AD%A5%E9%AA%A4%2F</url>
    <content type="text"><![CDATA[Ubuntu 16.04安装docker详细步骤开始安装 由于apt官方库里的docker版本可能比较旧，所以先卸载可能存在的旧版本： $ sudo apt-get remove docker docker-engine docker-ce docker.io 更新apt包索引： $ sudo apt-get update 安装以下包以使apt可以通过HTTPS使用存储库（repository）： $ sudo apt-get install -y apt-transport-https ca-certificates curl software-properties-common 添加Docker官方的GPG密钥： $ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add - 使用下面的命令来设置stable存储库： $ sudo add-apt-repository &quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable&quot; 再更新一下apt包索引： $ sudo apt-get update 安装最新版本的Docker CE： $ sudo apt-get install -y docker-ce 验证docker 查看docker服务是否启动： $ systemctl status docker 若未启动，则启动docker服务： $ sudo systemctl start docker 经典的hello world： $ sudo docker run hello-world 有以上输出,表示docker安装成功. 在ubuntu平台下使用apt-get命令下载速度太慢的问题解决第一种1、进入设置，从哪进都一样找到就行。 2、选择软件与更新（Software and updates，英语估计是这个把） 点击下载自：这个下拉框，选中其它站点，选择镜像 选择阿里的或者搜狐的镜像，然后点击选择服务器 输入管理员密码 你可以选择等待，或者直接Cancel 然后下拉框的选中就改变了，Ctrl + Alt + T进入终端 1 apt-get update //更新库]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2F2019%2F08%2F11%2FVMware14.0.0%20%E7%89%88%E6%9C%AC%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AE%89%E8%A3%85Ubuntu16.04%20LTS%E7%89%88%E6%9C%ACLinux%E7%B3%BB%E7%BB%9F%EF%BC%88%E5%A4%9A%E5%9B%BE%E8%AF%A6%E7%BB%86%E6%AD%A5%E9%AA%A4%EF%BC%89%2F</url>
    <content type="text"><![CDATA[VMware14.0.0 版本虚拟机安装Ubuntu16.04 LTS版本Linux系统（多图详细步骤）一.前期准备工作1.成功安装完成VMware14软件； 2.去Ubuntu官网下载Ubuntu16.0.4 LTS 版本的镜像文件。 二.安装步骤1.打开VMware软件，选择《创建虚拟机》； 2.选择《自定义》，并点击《下一步》； 3.硬件兼容性选择《Workstation14.x》,并点击《下一步》； 4.选择《稍后安装操作系统》，并点击《下一步》； 5.客户机操作系统选择《Linux(L)》，版本选择《Ubuntu 64位》，并点击《下一步》； 6.在电脑非系统盘建立一个文件夹，用于存放安装后的Ubuntu系统，并选择该目录，并点击《下一步》，如图所示： 7.处理器配置采用默认配置，如图所示，并点击《下一步》； 8.虚拟机内存分配根据电脑配置来分配，本机分配1024MB大小，分配好大小后点击《下一步》： 9.网络类型选择《使用网络地址转换（NAT）(E)》选项，tips:在VMware中提供了三种网络模式，分别为①桥接模式(Bridge)②网络地址转换模式(NAT)③ 仅主机模式（Host-Only）,三种网络模式各自有不同的功能，需要用到的可以详细了解； 10.加下来两个步骤均选择默认选项，并点击《下一步》； 11.选择磁盘选择《创建新虚拟磁盘》，并点击《下一步》； 12.磁盘大小根据自己实际需要，本机选择30GB大小，并选择《将虚拟磁盘拆分成多个文件（M）》，并点击《下一步》； 13.指定磁盘文件命名《Ubuntu 16 0.4 LTS》,并点击《下一步》； 14.到下一界面时选择《自定义硬件》，并进入下一步设置 15.在硬件设置界面点击《新CD/DVD（SATA）》选项，右边选择《使用ISO映像文件（M）》,并选择Ubuntu16.04镜像所在文件夹位置,并点击确定，虚拟机基本完成安装。 16.开启虚拟机进行进一步的安装配置。 17.开启虚拟机后，进一步的安装配置如图所示； 选择中文安装； 根据需要勾选软件安装； 输入自己的用户名和密码； 点击《继续》开始安装，稍等一会后安装完成；并点击重启后输入用户名和密码后进入Ubuntu系统界面。 安装完成 三、配置网络这里，我们选择NAT方式，来实现Ubuntu的静态IP地址配置。 打开VMware，在顶部依次选择：编辑 &gt; 虚拟网路编辑器，打开虚拟网路编辑器： 首先，去掉VMnet0和VMnet1，只保留VMnet8。然后，去掉如下图中的“使用本地DHCP服务奖IP地址分配给虚拟机”： 此外，这里的子网IP为：192.168.8.0，子网掩码为：255.255.255.0，因此，在Ubuntu中，设置IP地址的时候，可以设置为192.168.8.x，x可以为1~255。 选择“NAT设置”，打开NAT设置面板： 查看自己的网关地址，例如，此处的网关应该为：192.168.8.2。 最后，在VMWare的虚拟机管理界面，选择Ubuntu的“编辑虚拟机设置”，打开Ubuntu这个虚拟的设置界面。 选择网络适配器，然后确定网络连接选中的是“自定义”中的VMnet8(NAT模式)： 完成以上步骤，VMWare的网络环境也就设置完成。 为Ubuntu设置静态IP地址 第一种 通过网路管理面板设置IP 在Ubuntu桌面的右上角，点击网络图标，然后选择“Edit Connections”： Step 1 点击“Edit”按钮，打开编辑页面 Step 2 Method：选择Manual Step 3 将IP地址填入Addresses栏 为： IP： 192.168.8.100 子网掩码： 255.255.255.0 网关： 192.168.8.2 然后，选择保存。 最后，点击Ubuntu桌面右上角的网络图标，选择“Disconnect”，断开连接。然后再打开该菜单，选择”Connect”，即可连接上网。 第二种 通过Terminal命令行来设置IP地址 打开Ubuntu的终端，输入： sudo gedit /etc/network/interfaces 表示使用gedit编辑器打开interfaces文件。 在打开的文件中，若有内容，先全部删除。然后输入如下代码： 12345678auto loiface lo inet loopback auto ens33iface ens33 inet staticaddress 192.168.8.100netmask 255.255.255.0gateway 192.168.8.2 如下图所示： 然后，配置DNS服务器： sudo gedit /etc/resolv.conf 在里面填入阿里的DNS：223.5.5.5 nameserver 223.5.5.5 保存 关闭gedit（先保存，后关闭），然后，在命令行中输入： sudo /etc/init.d/networking restart 重启网络即可。 在Ubuntu 16.04版本中，网卡的名称不是eth0，而是ens33。所以，在配置interfaces文件的时候，不要用eth0代替ens33，否则也会出现这个问题。当然，你可以通过ifconfig查看自己的网卡情况。 重启系统之后，发现网络无法使用，右上角的网络图标点击之后显示“device not managed” 解决方法： sudo gedit /etc/NetworkManager/NetworkManager.conf 打开该文件，将“managed=false”修改为“managed=true”。 重启network manager： sudo service network-manager restart 安装时出现的问题1、ubuntu下使用vi是方向键变乱码 退格键不能使用的解决方法 编辑/etc/vim/vimrc.tiny 由于/etc/vim/vimrc.tiny的拥有者是root用户，所以要在root的权限下对这个文件进行修改。很简单，这个文件里面的倒数第二句话是“set compatible”，如下所示： 将“compatible”改成“nocompatible”非兼容模式就可以解决方向键变ABCD的问题了。接下来要解决Backspace键的问题也很简单，在刚才那句话后面再加一句：set backspace=2 变成下图所示： 安装vim full版本 由于ubuntu预安装的是tiny版本，所以会导致我们在使用上的产生上述的不便。但是，我们安装了vim的full版本之后，键盘的所有键在vi下就很正常了。 首先，要先卸掉旧版的vi，输入以下命令： sudo apt-get remove vim-common 然后安装full版的vim，输入命令： sudo apt-get install vim 这样安装好了之后，我们在编辑文件的时候依然是使用“vi”命令来启动新装的vim，但是操作起来比tiny更加方便了。 添加”.vimrc”文件 这并不是一个聪明的方法。它是在用户的个人目录下，编辑.vimrc文件(注意文件名是以“.”开头的)，添加下面两句语句： 12set nocompatible //以非兼容模式工作set backspace=2 如下图所示： ​ 保存退出之后，以后该用户使用vi就能够避免键盘方向键和Backspace键无效的问题了。 之所以说它不是个聪明的办法是因为我们必须为每个用户都在其个人目录下添加“.vimrc”文件，才能使所有用户都正常使用vi的功能，这是个比较大的工作量。所以也不推荐，尽管我自己初始也是用这种办法解决的(因为我系统上的用户只有2个，比较少)。 推荐第二种。 2、vim编辑文件时，出现如下的错误： 12345678910111213141516171819Found a swap file by the name"/opt/nginx/conf/.nginx.conf.swp"owned by: root dated:Sat Apr 5 08:11:44 2014file name: /opt/nginx/conf/nginx.confmodified: YESuser name: root host name: localhost.localdomainprocess ID: 1343While opening file "/opt/nginx/conf/nginx.conf"dated: Sat Apr 5 08:13:44 2014NEWER than swap file! 查询相关的资料发现是这是由于在编辑该文件的时异常退出，而vim在编辑文件时会创建一个交换文件swap file以保证文件的安全性。 所以在再每次打开这个文件都会出现这个警告，为了去掉这个警告，我们只需要删除这个swap文件即可。 该swap文件是隐藏的，我们可以通过ls –la命令查看到。使用rm命令进行删除即可。 切换到该文件所在的目录下，在此是：/opt/nginx/conf 使用rm命令进行删除，rm –f .nginx.conf.swp 3、在虚拟机上安装了Ubuntu然后sudo apt-get update 无法解析域名 既然提示域名解析失败，那么就想办法加一个万能的域名： 1、编辑文件 sudo vim /etc/resolv.conf 2、在最后加上 nameserver 8.8.8.8 3、保存退出 VM使用 最好在每一次大的改动后写入快照。 克隆在我们现在的虚拟机上克隆出一个干净的初始完整虚拟机，以后备用。 右键点击安装完的虚拟机 -&gt; 管理 -&gt; 克隆，按步骤操作即可。第三步建议创建完整克隆，如图。 克隆完成后，这个克隆机可以作为备份，防止以后又要重新安装干净的虚拟机。OK，我们可以再重新克隆一个来折腾。 修改克隆机配置需要修改的地方有如下两处： 网络配置文件ifcfg-ens33的ip地址 hostname主机名，不要跟源克隆机一致 修改ifcfg-ens33，如图修改ip地址，递增1即可 2.修改主机名，配置文件为/etc/hostname，修改为你想要的主机名即可 hostnamectl set-hostname 别名 重启克隆机网络，并测试网络连通性，和与主机的连通性 services network resart]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2F2019%2F08%2F08%2FSpring%2F</url>
    <content type="text"><![CDATA[SpringSpring Framework 核心技术IOC Container(IOC 容器) Java Bean Setter/Getter method Java Beans(规范) 内省 基础核心特性：反射（Reflection） 附加特性：引用（Reflection） Reflection SoftReflection WeakReflection PhantomReflection FinalReflection * BeanInfo * `BeanDescriptor` * `PropertyDescriptor` * 事件：`PropertyChangeEvent` * `EventObject` * 监听器：`PropertyChangeListener` * `java.util.EventListener` * `MethodDescriptor` ioc（控制反转） 应用不关心依赖组件的来源，通过一定DI方式查找 借鉴了Java EE 概念,javaee容器（EJB容器,JSF容器） EJB容器 Bean 模式 Local 容器Bean Remote RMI Bean类型 会话（Session Bean） 无状态 Bean 有状态 Bean 持久化 （Persistence Bean) Hibernate 消息驱动 (Java Messaging Bean) IMS ActiveMQ Kafka DI(依赖注入) Java EE : JNDI ( Java Naming and Diretory interface) javax.naming.Context 名称 javax.naming.Context#lookup(java.lang.String) javax.naming.Context#lookup(java.naming.Name) EJB javax.ejb.@Ejb 依赖查找（Dependency LookUp） ID、别名、名称查找 BeanFactory#getBean(String)：Object 类型查找 BeanFactory#getBean(Class)：T 注解查找 ListableBeanFactory#getBeanWithAnnotation(Class) FactoryBean 查找 FactoryBean#getObject() ObjectFactory 查找 FactoryBean#getObject() 依赖注入（Dependency injection） 方法 Spring @Autowired Java @Resource Java EE @inject 途径 字段（Filed）注入 属性（Setter ）注入 方法（Method ）注入 构造器（Constructor）注入 Events核心模式：观察模式 Spring事件 : ApplicationEvent java.util.EventObject Spring事件监听器 : ApplicationListener java.util.EventListener Spring事件广播器：ApplicationEventMulticaster SimpleApplicationEventMulticaster 1234567891011121314151617public void multicastEvent(ApplicationEvent event, @Nullable ResolvableType eventType) &#123; ResolvableType type = eventType != null ? eventType : this.resolveDefaultEventType(event); Iterator var4 = this.getApplicationListeners(event, type).iterator(); while(var4.hasNext()) &#123; ApplicationListener&lt;?&gt; listener = (ApplicationListener)var4.next(); Executor executor = this.getTaskExecutor(); if (executor != null) &#123; executor.execute(() -&gt; &#123; this.invokeListener(listener, event); &#125;); &#125; else &#123; this.invokeListener(listener, event); &#125; &#125; &#125; Bean 生命周期管理之一 事件（包装）数据变化 Resourcejava资源管理URL资源管理 协议： 获取协议：java.net.URL#getProtocol 协议处理 HTTP: sun.net.www.protocol.http.Handler FTP: sun.net.www.protocol.ftp.Handler HTTPS : sun.net.www.protocol.https.Handler File : sun.net.www.protocol.file.Handler Email: sun.net.www.protocol.emailto.Handler ClassLoader(Class Path) 资源管理 资源 获取当前ClassLoader资源URL：java.lang.ClassLoader#getResource(String) 获取当前ClassLoader所有资源URL: java.lang.ClassLoader#getResources(String) 获取当前ClassLoader资源InputStream: java.lang.ClassLoader#getResourceAsStream(String) Spring资源管理资源定位 ：classpath:/META-INF/abc.properties 多资源定位：classspath*:/META-INF/abc.properties Resource接口URL 、File 和 ClassLoader 封装实现 语义： 资源定位（URL、File） 资源流读取（InputSteam） 实现类 classPathResource getURL()-&gt;ClassLoader#getResource(String) getInputStream-&gt;java.lang.ClassLoader#getResourceAsStream(String) 加载器 ResourceLoader 获取resource ：ResourceLoader#getResource(String) 默认实现：DefaultResourceLoader 前缀 = “classpath:” -&gt;classPathResource 否则 -&gt;FileUrlResource或UrlResource 协议扩展 ProtocolResolver 通过路径解析出 resource i18njava i18n java 标准接口ResourceBundle &lt;java1.6 : 乱码, 解决方案native2ascci java 1.6 ResourceBundle.Control java 1.8 ResourceBundleControlProvider Spring MessageSource MessageFormat Hello,{0} -&gt;0=”World”-&gt;Hello,World 实现类 ResourceBundleMessageSource ValidationJava Bean Validation(JSR-308)Spring Validator Spring Validator + Bean Validation :LocalValidatorFactoryBean 使用场景 标准Java bean 校验 Spring MVC 校验-&gt;Form 校验、@RequestBody校验，可以自定义 SpringBoot 外部化配置 @ConfigurationProperties DataBinding使用场景 Spring 自定义绑定 Spring MVC 参数绑定 Spring Boot 外部化配置 @ConfigurationProperties Type Conversion 常见类型转换 自定义转换 使用场景 Spring Boot 外部化配置 @ConfigurationProperties]]></content>
  </entry>
  <entry>
    <title><![CDATA[hexo + github 搭建个人免费博客]]></title>
    <url>%2F2019%2F08%2F07%2Fhexo%20%2B%20github%20%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%85%8D%E8%B4%B9%E5%8D%9A%E5%AE%A2%2F</url>
    <content type="text"><![CDATA[hexo + github 搭建个人免费博客1.前言 使用github pages服务搭建博客的好处： 全是静态文件，访问速度快； 免费方便； 基于github的版本管理，想恢复到哪个历史版本都行； 博客内容可以轻松打包、转移、发布到其他平台； 1.1.准备工作在开始之前，你必须已经 有一个github账号； 安装了node.js,并了解相关基础知识； 安装了git； 本文所使用的环境 windows10; node.js@10.15.3; git@2.20.1; hexo@3.9.0; 2.搭建github博客2.1.创建仓库创建一个名为你的用户名.github.io的仓库 3.配置SSH key​ 为什么要配置这个？因为你提交代码肯定需要你的github权限才可以，但是直接使用用户名和密码太不安全，所以我们使用ssh key来解决本地和服务器的问题。 用git bash 执行如下命令： 1$ cd ~/. ssh #检查本机已存在的ssh密钥 如果没有，则执行命令： 1ssh-keygen -t rsa -C "邮件地址" 然后连续3次回车，最终会生成一个文件在用户目录下，打开用户目录，找到.ssh\id_rsa.pub文件，记事本打开并复制里面的内容，打开你的github主页，进入个人设置 -&gt; SSH and GPG keys -&gt; New SSH key： 将刚复制的内容粘贴到key那里，title随便填，保存。 3.1测试是否成功1$ ssh -T git@github.com # 注意邮箱地址不用改 如果提示Are you sure you want to continue connecting (yes/no)?，输入yes，然后会看到： 1Hi liuxianan! You’ve successfully authenticated, but GitHub does not provide shell access. 看到这个信息说明SSH已配置成功！ 此时你还需要配置： 12$ git config --global user.name "liuxianan"// 你的github用户名，非昵称$ git config --global user.email "xxx@qq.com"// 填写你的github注册邮箱 4.使用hexo写博客4.1hexo简介Hexo是一个简单、快速、强大的基于 Github Pages 的博客发布工具，支持Markdown格式，有众多优秀插件和主题。 官网： http://hexo.iogithub: https://github.com/hexojs/hexo 4.2原理由于github pages存放的都是静态文件，博客存放的不只是文章内容，还有文章列表、分类、标签、翻页等动态内容，假如每次写完一篇文章都要手动更新博文目录和相关链接信息，相信谁都会疯掉，所以hexo所做的就是将这些md文件都放在本地，每次写完文章后调用写好的命令来批量完成相关页面的生成，然后再将有改动的页面提交到github。 4.3 注意事项 安装之前先来说几个注意事项： ​ 很多命令既可以用Windows的cmd来完成，也可以使用git bash来完成，但是部分命令会有一些问题，为避免不必要的问题，建议全部使用git bash来执行； ​ hexo不同版本差别比较大，网上很多文章的配置信息都是基于2.x的，所以注意不要被误导； ​ hexo有2种_config.yml文件，一个是根目录下的全局的_config.yml，一个是各个theme下的； 4 安装1$ npm install -g hexo 4.5 初始化在电脑的某个地方新建一个名为hexo的文件夹（名字可以随便取），比如我的是F:\Workspaces\hexo，由于这个文件夹将来就作为你存放代码的地方，所以最好不要随便放。 12$ cd /f/Workspaces/hexo/$ hexo init hexo会自动下载一些文件到这个目录，包括node_modules，目录结构如下图： 12$ hexo g # 生成$ hexo s # 启动服务 执行以上命令之后，hexo就会在public文件夹生成相关html文件，这些文件将来都是要提交到github去的： hexo s是开启本地预览服务，打开浏览器访问 http://localhost:4000 即可看到内容，很多人会碰到浏览器一直在转圈但是就是加载不出来的问题，一般情况下是因为端口占用的缘故，因为4000这个端口太常见了，解决端口冲突问题请参考这篇文章： http://blog.liuxianan.com/windows-port-bind.html 第一次初始化的时候hexo已经帮我们写了一篇名为 Hello World 的文章，默认的主题比较丑，打开时就是这个样子： 4.6 修改主题既然默认主题很丑，那我们别的不做，首先来替换一个好看点的主题。这是 官方主题。 个人比较喜欢的2个主题：hexo-theme-jekyll 和 hexo-theme-yilia。 首先下载这个主题： 12$ cd /f/Workspaces/hexo/$ git clone https://github.com/litten/hexo-theme-yilia.git themes/yilia 修改_config.yml中的theme: landscape改为theme: yilia，然后重新执行hexo g来重新生成。 如果出现一些莫名其妙的问题，可以先执行hexo clean来清理一下public的内容，然后再来重新生成和发布。 4.7上传到github 如果你一切都配置好了，发布上传很容易，一句hexo d就搞定，当然关键还是你要把所有东西配置好。 首先，ssh key肯定要配置好。 其次，配置_config.yml中有关deploy的部分： 正确写法： 1234deploy: type: git repository: git@github.com:仓库地址 branch: master 安装一个插件 1npm install hexo-deployer-git --save 其它命令不确定，部署这个命令一定要用git bash，否则会提示Permission denied (publickey). 打开你的git bash，输入hexo d就会将本次有改动的代码全部提交，没有改动的不会： 4.9保留CNAME、README.md等文件提交之后网页上一看，发现以前其它代码都没了，此时不要慌，一些非md文件可以把他们放到source文件夹下，这里的所有文件都会原样复制（除了md文件）到public目录的： 由于hexo默认会把所有md文件都转换成html，包括README.md，所有需要每次生成之后、上传之前，手动将README.md复制到public目录，并删除README.html。 4.10常用hexo命令常见命令 1234567hexo new "postName" #新建文章hexo new page "pageName" #新建页面hexo generate #生成静态页面至public目录hexo server #开启预览访问端口（默认端口4000，'ctrl + c'关闭server）hexo deploy #部署到GitHubhexo help # 查看帮助hexo version #查看Hexo的版本 缩写： 1234hexo n == hexo newhexo g == hexo generatehexo s == hexo serverhexo d == hexo deploy 组合命令: 12hexo s -g #生成并本地预览hexo d -g #生成并上传 4.11_config.yml这里面都是一些全局配置，每个参数的意思都比较简单明了，所以就不作详细介绍了。 需要特别注意的地方是，冒号后面必须有一个空格，否则可能会出问题。 4.12写博客定位到我们的hexo根目录，执行命令： 1hexo new 'my-first-blog' hexo会帮我们在_posts下生成相关md文件： 我们只需要打开这个文件就可以开始写博客了，默认生成如下内容： 当然你也可以直接自己新建md文件，用这个命令的好处是帮我们自动生成了时间。 一般完整格式如下： 123456789title: postName #文章页面上的显示名称，一般是中文date: 2013-12-02 15:30:16 #文章生成时间，一般不改，当然也可以任意修改categories: 默认分类 #分类tags: [tag1,tag2,tag3] #文章标签，可空，多标签请用格式，注意:后面有个空格description: 附加一段文章摘要，字数最好在140字以内，会出现在meta的description里面以下是正文 那么hexo new page &#39;postName&#39;命令和hexo new &#39;postName&#39;有什么区别呢？ 1hexo new page "my-second-blog" 生成如下： 最终部署时生成：hexo\public\my-second-blog\index.html，但是它不会作为文章出现在博文目录。 4.12.1 写博客工具 typora 4.12.2 如何让博文列表不显示全部内容默认情况下，生成的博文目录会显示全部的文章内容，如何设置文章摘要的长度呢？ 答案是在合适的位置加上&lt;!--more--&gt;即可，例如： 12345678910111213# 前言使用github pages服务搭建博客的好处有：1. 全是静态文件，访问速度快；2. 免费方便，不用花一分钱就可以搭建一个自由的个人博客，不需要服务器不需要后台；3. 可以随意绑定自己的域名，不仔细看的话根本看不出来你的网站是基于github的；&lt;!--more--&gt;4. 数据绝对安全，基于github的版本管理，想恢复到哪个历史版本都行；5. 博客内容可以轻松打包、转移、发布到其它平台；6. 等等； 最终效果： 5.参考http://www.cnblogs.com/zhcncn/p/4097881.html http://www.jianshu.com/p/05289a4bc8b2]]></content>
  </entry>
</search>
